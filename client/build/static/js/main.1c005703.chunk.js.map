{"version":3,"sources":["components/AppNavBar.js","components/PetList.js","components/PetAdd.js","components/PetEdit.js","components/PetView.js","App.js","serviceWorker.js","index.js"],"names":["AppNavBar","props","Navbar","bg","variant","Brand","href","appTitle","Toggle","Nav","className","Link","PetList","Table","striped","bordered","hover","size","pets","map","p","key","_id","name","type","Button","onClick","navigate","deletePet","PetAdd","React","useState","validationError","setValidationError","setName","setType","description","setDescription","skill1","setSkill1","skill2","setSkill2","skill3","setSkill3","Jumbotron","Form","Group","controlId","Label","Control","placeholder","value","onChange","e","target","newPet","axios","put","then","response","data","status","refreshPets","JSON","stringify","message","catch","err","errors","push","join","Card","Text","PetEdit","useEffect","get","id","pet","result","updatedPet","patch","console","log","PetView","selectedPet","setSelectedPet","item","alert","likes","App","io","socket","setPets","petId","delete","on","msg","Container","path","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error"],"mappings":"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","file":"static/js/main.1c005703.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Nav, Navbar, Button } from 'react-bootstrap';\r\nimport { Link } from '@reach/router';\r\n\r\nconst AppNavBar = props => {\r\n    return (\r\n        <Navbar bg=\"dark\" variant=\"dark\">\r\n            <Navbar.Brand href=\"/\">{props.appTitle}</Navbar.Brand>\r\n            <Navbar.Toggle />\r\n            <Nav className=\"mr-auto\">\r\n                <Nav.Link href=\"/\">All Pets</Nav.Link>    \r\n                <Nav.Link href=\"/pets/new\">New Pet</Nav.Link>\r\n            </Nav>\r\n        </Navbar>\r\n    )\r\n}\r\n\r\nexport default AppNavBar\r\n","import React from 'react'\r\nimport { Table, Button } from 'react-bootstrap';\r\nimport axios from 'axios';\r\nimport { navigate } from '@reach/router';\r\n\r\nconst PetList = props => {   \r\n\r\n    \r\n    return (\r\n        <Table striped bordered hover size=\"sm\">\r\n        <thead>\r\n            <tr>\r\n            <th>Name</th>\r\n            <th>Type</th>\r\n            <th>Actions</th>\r\n            </tr>\r\n        </thead>\r\n        <tbody>\r\n            {\r\n                props.pets.map(p =>\r\n                    <tr key={p._id}>\r\n                    <td>{p.name}</td>\r\n                    <td>{p.type}</td>\r\n                    <td><Button onClick={() => navigate(`/pets/${p._id}`)}>Details</Button> <Button onClick={() => navigate(`/pets/${p._id}/edit`)}>Edit</Button> <Button onClick={() => props.deletePet(p._id)}>Delete</Button></td>\r\n                    </tr>\r\n                )\r\n            }\r\n        </tbody>\r\n        </Table>\r\n    )\r\n}\r\n\r\nexport default PetList\r\n","import React from 'react';\r\nimport axios from 'axios';\r\nimport { Form, Button, Card, Jumbotron } from 'react-bootstrap';\r\nimport { navigate } from '@reach/router';\r\n\r\nconst PetAdd = props => {\r\n    const [validationError, setValidationError] = React.useState(\"\");    \r\n    const [name, setName] = React.useState(\"\")\r\n    const [type, setType] = React.useState(\"\")\r\n    const [description, setDescription] = React.useState(\"\")\r\n    const [skill1, setSkill1] = React.useState(\"\")\r\n    const [skill2, setSkill2] = React.useState(\"\")\r\n    const [skill3, setSkill3] = React.useState(\"\")\r\n\r\n    const AddPet = () => {\r\n        let newPet = {\r\n            name: name,\r\n            type: type,\r\n            description: description,\r\n            skill1: skill1,\r\n            skill2: skill2,\r\n            skill3: skill3\r\n        }\r\n        axios.put(\"http://localhost:8000/api/pets\", newPet)\r\n            .then(response => {\r\n                if (response.data.status === \"succeeded\") {\r\n                    props.refreshPets();\r\n                    navigate(\"/\");\r\n                } else {\r\n                    setValidationError(JSON.stringify(response.data.message));\r\n                }\r\n            })\r\n            .catch(err => {\r\n                let errors = [];\r\n                let data = err.response.data;\r\n                for (let key in data.errors) {\r\n                    errors.push(data.errors[key].message);\r\n                }\r\n                setValidationError(errors.join(\", \"));\r\n            });\r\n    }    \r\n    return (\r\n        <Jumbotron>\r\n            <h3>Add New Pet</h3>\r\n            <Form>\r\n            <Form.Group controlId=\"itemName\">\r\n                <Form.Label>Pet Name</Form.Label>\r\n                <Form.Control type=\"text\" placeholder=\"Enter name\" value={name} onChange={e => setName(e.target.value)}/>\r\n            </Form.Group>\r\n            <Form.Group controlId=\"type\">\r\n                <Form.Label>Pet Type</Form.Label>\r\n                <Form.Control type=\"text\" placeholder=\"Enter type\" value={type} onChange={e => setType(e.target.value)}/>\r\n            </Form.Group>\r\n            <Form.Group controlId=\"description\">\r\n                <Form.Label>Pet Description</Form.Label>\r\n                <Form.Control type=\"text\" placeholder=\"Enter description\" value={description} onChange={e => setDescription(e.target.value)}/>\r\n            </Form.Group>\r\n            <Form.Group controlId=\"skill1\">\r\n                <Form.Label>Skill 1</Form.Label>\r\n                <Form.Control type=\"text\" placeholder=\"Enter skill1\" value={skill1} onChange={e => setSkill1(e.target.value)}/>\r\n            </Form.Group>\r\n            <Form.Group controlId=\"skill2\">\r\n                <Form.Label>Skill 2</Form.Label>\r\n                <Form.Control type=\"text\" placeholder=\"Enter skill2\" value={skill2} onChange={e => setSkill2(e.target.value)}/>\r\n            </Form.Group>\r\n            <Form.Group controlId=\"skill3\">\r\n                <Form.Label>Skill 3</Form.Label>\r\n                <Form.Control type=\"text\" placeholder=\"Enter skill3\" value={skill3} onChange={e => setSkill3(e.target.value)}/>\r\n            </Form.Group>\r\n            <div className=\"d-flex justify-content-around\">\r\n            <Button variant=\"primary\" onClick={() => navigate(\"/\")}>\r\n                Cancel\r\n            </Button>\r\n            <Button variant=\"primary\" onClick={AddPet}>\r\n                Submit\r\n            </Button>\r\n            </div>\r\n            <Card.Text className=\"text-danger\">\r\n                {validationError}\r\n            </Card.Text>\r\n            </Form>\r\n        </Jumbotron>\r\n    )\r\n}\r\n\r\nexport default PetAdd\r\n","import React from 'react';\r\nimport axios from 'axios';\r\nimport { Form, Button, Card, Jumbotron } from 'react-bootstrap';\r\nimport { navigate } from '@reach/router';\r\n\r\nconst PetEdit = props => {\r\n    const [validationError, setValidationError] = React.useState(\"\");\r\n    const [name, setName] = React.useState(\"\")\r\n    const [type, setType] = React.useState(\"\")\r\n    const [description, setDescription] = React.useState(\"\")\r\n    const [skill1, setSkill1] = React.useState(\"\")\r\n    const [skill2, setSkill2] = React.useState(\"\")\r\n    const [skill3, setSkill3] = React.useState(\"\")\r\n\r\n    const getSelectedPet = () => {\r\n        axios.get(`http://localhost:8000/api/pets/${props.id}`)\r\n        .then(response => {\r\n            let pet = response.data.result;\r\n            setName(pet.name);\r\n            setType(pet.type);\r\n            setDescription(pet.description);\r\n            setSkill1(pet.skill1);\r\n            setSkill2(pet.skill2);\r\n            setSkill3(pet.skill3);\r\n        })\r\n    };\r\n    React.useEffect(() => {\r\n        getSelectedPet();\r\n    },[props.id]);\r\n\r\n    const updatePet = () => {\r\n        let updatedPet = {\r\n            name: name,\r\n            type: type,\r\n            description: description,\r\n            skill1: skill1,\r\n            skill2: skill2,\r\n            skill3: skill3\r\n        }\r\n        axios.patch(`http://localhost:8000/api/pets/${props.id}`, updatedPet)\r\n            .then(response => {\r\n                if (response.data.status === \"succeeded\") {\r\n                    props.refreshPets();\r\n                    navigate(\"/\");\r\n                } else {\r\n                    setValidationError(JSON.stringify(response.data.message));\r\n                }\r\n            })\r\n            .catch(err => {\r\n                let errors = [];\r\n                console.log(err.response);\r\n                let data = err.response.data;\r\n                for (let key in data.errors) {\r\n                    errors.push(data.errors[key].message);\r\n                }\r\n                setValidationError(errors.join(\", \"));\r\n            });\r\n    }        \r\n    return (\r\n<Jumbotron>\r\n            <h3>Edit Pet</h3>\r\n            <Form>\r\n            <Form.Group controlId=\"itemName\">\r\n                <Form.Label>Pet Name</Form.Label>\r\n                <Form.Control type=\"text\" placeholder=\"Enter name\" value={name} onChange={e => setName(e.target.value)}/>\r\n            </Form.Group>\r\n            <Form.Group controlId=\"type\">\r\n                <Form.Label>Pet Type</Form.Label>\r\n                <Form.Control type=\"text\" placeholder=\"Enter type\" value={type} onChange={e => setType(e.target.value)}/>\r\n            </Form.Group>\r\n            <Form.Group controlId=\"description\">\r\n                <Form.Label>Pet Description</Form.Label>\r\n                <Form.Control type=\"text\" placeholder=\"Enter description\" value={description} onChange={e => setDescription(e.target.value)}/>\r\n            </Form.Group>\r\n            <Form.Group controlId=\"skill1\">\r\n                <Form.Label>Skill 1</Form.Label>\r\n                <Form.Control type=\"text\" placeholder=\"Enter skill1\" value={skill1} onChange={e => setSkill1(e.target.value)}/>\r\n            </Form.Group>\r\n            <Form.Group controlId=\"skill2\">\r\n                <Form.Label>Skill 2</Form.Label>\r\n                <Form.Control type=\"text\" placeholder=\"Enter skill2\" value={skill2} onChange={e => setSkill2(e.target.value)}/>\r\n            </Form.Group>\r\n            <Form.Group controlId=\"skill3\">\r\n                <Form.Label>Skill 3</Form.Label>\r\n                <Form.Control type=\"text\" placeholder=\"Enter skill3\" value={skill3} onChange={e => setSkill3(e.target.value)}/>\r\n            </Form.Group>\r\n            <div className=\"d-flex justify-content-around\">\r\n            <Button variant=\"primary\" onClick={() => navigate(\"/\")}>\r\n                Cancel\r\n            </Button>\r\n            <Button variant=\"primary\" onClick={updatePet}>\r\n                Submit\r\n            </Button>\r\n            </div>\r\n            <Card.Text className=\"text-danger\">\r\n                {validationError}\r\n            </Card.Text>\r\n            </Form>\r\n        </Jumbotron>\r\n    )\r\n}\r\n\r\nexport default PetEdit\r\n","import React from 'react';\r\nimport axios from 'axios';\r\nimport { Form, Button, Card, Jumbotron, Table } from 'react-bootstrap';\r\nimport { navigate } from '@reach/router';\r\n\r\nconst PetView = props => {\r\n    const [validationError, setValidationError] = React.useState(\"\");\r\n    const [selectedPet, setSelectedPet] = React.useState(\"\")\r\n    const getSelectedPet = () => {\r\n        axios.get(`http://localhost:8000/api/pets/${props.id}`)\r\n        .then(response => {\r\n            let item = response.data.result;\r\n            console.log(JSON.stringify(item));\r\n            setSelectedPet(item);\r\n        })\r\n    };\r\n    React.useEffect(() => {\r\n        getSelectedPet();\r\n    },[props.id]);\r\n\r\n    const addLike = () => {\r\n\r\n    }        \r\n    return (\r\n        <Jumbotron>\r\n            <h3>Details about: {selectedPet.name}</h3>\r\n            <Button onClick={() => { props.deletePet(props.id); alert(`Thank you for adopting ${selectedPet.name}!`); navigate(\"/\");}} >Adopt {selectedPet.name}</Button>\r\n            <Table striped bordered hover size=\"sm\">\r\n                <tbody>\r\n                    <tr>\r\n                        <th>Pet type:</th>\r\n                        <td>{selectedPet.type}</td>\r\n                    </tr>\r\n                    <tr>\r\n                        <th>Description:</th>\r\n                        <td>{selectedPet.description}</td>\r\n                    </tr>\r\n                    <tr>\r\n                        <th>Skills:</th>\r\n                        <td>{selectedPet.skill1} {selectedPet.skill2} {selectedPet.skill3}</td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td><Button>Like</Button></td>\r\n                        <td>{selectedPet.likes} like(s)</td>\r\n                    </tr>\r\n                </tbody>\r\n            </Table>\r\n        </Jumbotron>\r\n    )\r\n}\r\n\r\nexport default PetView\r\n","import React from 'react';\nimport { Container } from 'react-bootstrap';\nimport { Router, Link, navigate } from '@reach/router';\nimport axios from 'axios';\nimport io from 'socket.io-client';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\nimport AppNavBar from './components/AppNavBar';\nimport PetList from './components/PetList';\nimport PetAdd from './components/PetAdd';\nimport PetEdit from './components/PetEdit';\nimport PetView from './components/PetView';\n\nfunction App() {\n  const [socket] = React.useState(() => io(\":8000\"));\n  const [pets, setPets] = React.useState([]);\n  const refreshPets = () => {\n    axios.get(\"http://localhost:8000/api/pets\")\n    .then(response => setPets(response.data.result))\n  }\n  const deletePet = petId => {\n    axios.delete(`http://localhost:8000/api/pets/${petId}`)\n        .then(response => {\n            if (response.data.status === \"succeeded\") {\n                refreshPets();\n            } \n        })\n  } \n\n  React.useEffect(() => {\n    refreshPets();\n    socket.on('new_message_from_server', msg => {\n      //setChatMessages(prevMessages => { return [msg, ...prevMessages]})\n    });\n  },[]);\n\n  return (\n    <div className=\"App\">\n      <AppNavBar\n        appTitle=\"Pet Shelter Mern Exam\"\n        />\n        <Container>\n          <Router>\n            <PetList path=\"/\" pets={pets} refreshPets={refreshPets} deletePet={deletePet}/>\n            <PetAdd path=\"/pets/new\" refreshPets={refreshPets}/>\n            <PetEdit path=\"/pets/:id/edit\" refreshPets={refreshPets}/>\n            <PetView path=\"/pets/:id\" deletePet={deletePet}/>\n          </Router>\n        </Container>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}